def load(filename: str):
    with open(filename, 'r') as filedata:
        return [int(x) for x in filedata.read().strip().split(' ')]
    
def apply_rule(cache: dict[int, int], stone: int, step: int, steps: int) -> int:
    """return number of stones generated by this stone"""
    if step in cache and stone in cache[step]:
        return cache[step][stone]
    
    nb_stones = 1
    n = step
    s = stone
    while n < steps:
        length = len(str(s))
        n += 1
        if s == 0:
            s = 1
        elif length % 2 == 0:
            part1 = int(s / (10 ** (length/2)))
            part2 = int(s - part1 * (10 ** (length/2)))
            nb_stones += apply_rule(cache, part2, n, steps)
            s = part1
        else:
            s = s * 2024
    
    if not step in cache:
        cache[step] = dict()
    cache[step][stone] = nb_stones
    return nb_stones
    
    
def apply_rules(filename: str, steps: int):
    stones = load(filename)
    cache = dict()
    
    nb_stones = 0
    for stone in stones:
        nb_stones += apply_rule(cache, stone, 0, steps)
    
    return nb_stones

print("first part:")
print(apply_rules('day11/sample', 25))
print(apply_rules('day11/input', 25))

print("second part:")
print(apply_rules('day11/input', 75))